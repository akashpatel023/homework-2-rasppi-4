{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Problem 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Poisson equation\n",
    "\n",
    "We will now investigate solutions to Poisson's equation:\n",
    "\n",
    "$$\n",
    "\\nabla^2 V(\\mathbf{r}) = \\sum_i \\frac{\\partial^2 V}{\\partial r_i^2} = -\\alpha\\rho(\\mathbf{r})\n",
    "$$\n",
    "\n",
    "for potential $V$ and source density $\\rho$. In the case of Coulomb's law, $\\rho$ is the charge density and $V$ is the electric potential, with $\\alpha = 1/\\epsilon_0$.  \n",
    "\n",
    "\n",
    "We will investigate both **relaxation** and **Fourier** solutions\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "## Relaxation solutions\n",
    "\n",
    "As with BVPs, there are relaxation-based solutions in multiple dimensions for PDEs.  For simplicity we will consider Dirichlet boundary conditions such that the potential vanishes along the boundary \n",
    "\n",
    "$$V(\\mathbf{r_\\mathrm{boundary}}) = 0 $$\n",
    "\n",
    "There are three methods we will investigate\n",
    "\n",
    "- Jacobi iteration\n",
    "$$\n",
    "V_{i,j}^{n+1} = \\frac{1}{4} \\left( V_{i+1,j}^n + V_{i-1,j}^n + V_{i,j+1}^n + V_{i,j-1}^n + h^2 \\rho_{i,j}\\right)\n",
    "$$\n",
    "\n",
    "- Gauss-Seidel iteration (G-S)\n",
    "$$\n",
    "V_{i,j}^{n+1} = \\frac{1}{4} \\left( V_{i+1,j}^{n+1} + V_{i-1,j}^n + V_{i,j+1}^n + V_{i,j-1}^{n+1} + h^2 \\rho_{i,j}\\right)\n",
    "$$\n",
    "\n",
    "- Successive Over-Relaxation (SOR)\n",
    "$$\n",
    "V_{i,j}^{n+1} = (1-\\omega)V_{i,j}^n + \\frac{\\omega}{4} \\left( V_{i+1,j}^{n+1} + V_{i-1,j}^n + V_{i,j+1}^n + V_{i,j-1}^{n+1} + h^2 \\rho_{i,j}\\right)\n",
    "$$\n",
    "\n",
    "where $\\omega$ is the \"over-relaxation\" parameter and can be tuned for performance. \n",
    "\n",
    "We will investigate the overall rates of convergence to a steady solution, as well as the overall computation time to a steady solution. We will see that the Jacobi solution has the worst performance per iteration, however, it can be vectorized, whereas the other two cannot! As such, despite it converging the slowest, it can achieve a target accuracy faster than the other two due to vectorization. (There is a caveat here, the G-S and SOR implementations are in pure `python`, so cleverer tricks could be done with `C++` loops, however I will not go over a `swig` solution here). \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import cm\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import time\n",
    "import cmath\n",
    "\n",
    "class Poisson :\n",
    "    def __init__ (self, L, rho_init, method, calcError = True):\n",
    "        self.L = L                    # number of interior points in x and y\n",
    "        self.omega = 1.88177          # over-relaxation parameter for L = 50\n",
    "        self.N = L + 2                # interior plus two boundary points\n",
    "        N=self.N\n",
    "        self.V = np.zeros( (N, N) )   # potential to be found\n",
    "        self.VNew = np.zeros( (N, N) )# new potential after each step\n",
    "        self.h = 1.0 / (L + 1)        # lattice spacing assuming size in x and y = 1\n",
    "        self.nsmooth = 3              # smoothing steps for multigrid method\n",
    "        self.rho = np.array( rho_init )\n",
    "        self.method=method        \n",
    "        self.calcError = calcError\n",
    "        self.error  = 0. if self.calcError else None\n",
    "        self.errors = [] if self.calcError else None\n",
    "\n",
    "\n",
    "    def __call__(self):\n",
    "        return getattr(self,self.method)()\n",
    "\n",
    "    def update(self):\n",
    "        if self.calcError :\n",
    "            self.error = np.sum( np.abs(self.V - self.VNew) ) / self.V.size\n",
    "        self.V[:,:] = self.VNew[:,:]\n",
    "        if self.calcError :\n",
    "            self.errors.append(self.error)\n",
    "            return self.error\n",
    "        else :\n",
    "            return None\n",
    "\n",
    "        \n",
    "    def Jacobi(self) :\n",
    "        '''\n",
    "        Jacobi algorithm for a single iterative step\n",
    "        '''\n",
    "        self.VNew = self.JacStep(self.VNew,self.V,self.h,self.rho)\n",
    "        return self.update()\n",
    "\n",
    "    def JacStep(self, u, v, h, rho):\n",
    "        '''\n",
    "        Jacobi algorithm on arbitrary inputs. Called once by \"Jacobi\".\n",
    "        Called many times by \"MultiGrid\"\n",
    "        '''\n",
    "        u[1:-1,1:-1] = np.add.reduce([\n",
    "            0.25*v[1:-1, 2:] ,\n",
    "            0.25*v[1:-1, 0:-2],\n",
    "            0.25*v[2:,   1:-1] ,\n",
    "            0.25*v[0:-2, 1:-1] ,\n",
    "            h**2 * rho[1:-1,1:-1]])\n",
    "        return u\n",
    "\n",
    "            \n",
    "    def GaussSeidel(self):\n",
    "        ''' \n",
    "        Gauss-Seidel algorithm for one iterative step\n",
    "        '''\n",
    "        self.VNew[:,:] = self.V[:,:]\n",
    "        # perform Gauss-Seidel update\n",
    "        for i in range(1, self.L+1):\n",
    "            for j in range(1, self.L+1):\n",
    "                self.VNew[i][j] = 0.25 * (self.VNew[i-1][j] + self.VNew[i+1][j] +\n",
    "                                            self.VNew[i][j-1] + self.VNew[i][j+1] +\n",
    "                                            self.h**2 * self.rho[i][j])\n",
    "        return self.update()\n",
    "\n",
    "\n",
    "    def SuccessiveOverRelaxation(self):\n",
    "        '''\n",
    "        Averages between G-S and J methods. \n",
    "        '''\n",
    "\n",
    "        # update even sites in red-black scheme\n",
    "        for i in range(1, self.L+1):\n",
    "            for j in range(1, self.L+1):\n",
    "                if (i + j) % 2 == 0:\n",
    "                    self.VNew[i][j] = (1 - self.omega) * self.V[i][j] + self.omega / 4 * (\n",
    "                                 self.V[i-1][j] + self.V[i+1][j] + self.V[i][j-1] +\n",
    "                                 self.V[i][j+1] + self.h**2 * self.rho[i][j] )\n",
    "\n",
    "        # update odd sites in red-black scheme\n",
    "        for i in range(1, self.L+1):\n",
    "            for j in range(1, self.L+1):\n",
    "                if (i + j) % 2 != 0:\n",
    "                    self.VNew[i][j] = (1 - self.omega) * self.V[i][j] + self.omega / 4 * (\n",
    "                                 self.VNew[i-1][j] + self.VNew[i+1][j] + self.VNew[i][j-1] +\n",
    "                                 self.VNew[i][j+1] + self.h**2 * self.rho[i][j] )\n",
    "        return self.update()\n",
    "\n",
    "\n",
    "    def FFT(self):\n",
    "        '''\n",
    "        Explicitly solves differential equation in Fourier domain\n",
    "        '''\n",
    "        \n",
    "        # Make a grid to get indices\n",
    "        x = np.arange(self.N)\n",
    "        y = np.arange(self.N)\n",
    "        xx,yy = np.meshgrid(x,y)\n",
    "        # Construct root of unity\n",
    "        i = 0. + 1.j\n",
    "        W = cmath.exp( 2 * i * cmath.pi / float(self.N) )\n",
    "        # Get the denominator using the grid\n",
    "        d = 4.0 - np.power(W, xx ) - np.power(W, -xx) - np.power(W, yy) - np.power(W, -yy)\n",
    "        valid_d = (d > 0.0)\n",
    "        # FFT of rho columns\n",
    "        rhof = np.fft.fft(self.rho, axis=0)\n",
    "        # FFT of rho rows\n",
    "        rhof = np.fft.fft(rhof,axis=1)\n",
    "        # Solve for V in Fourier domain\n",
    "        Vf = np.divide( rhof * self.h**2, d, out=np.zeros_like(d, dtype=complex), where=np.absolute(d)>0)\n",
    "        # IFFT of V rows\n",
    "        self.V = np.fft.ifft( Vf, axis=0)\n",
    "        # IFFT of V columns\n",
    "        self.V = np.fft.ifft( self.V, axis=1)\n",
    "        return \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the relaxation simulations, we will put a point charge in the center of a \"grounded box\" (Dirichlet boundary conditions) and allow the solution to converge. We will first plot the wavefunction as determined by the Jacobi method (the others look almost identical). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "L = 50\n",
    "N = L+2\n",
    "q = 10.0  # point charge\n",
    "i = N // 4 # center of lattice\n",
    "j = (3*N)//4\n",
    "k = N//2\n",
    "h = 1/(L+1)\n",
    "rho = np.zeros( (N,N))\n",
    "rho[i,k] = q / h**2    # charge density\n",
    "rho[j,k] = -q / h**2\n",
    "\n",
    "nsteps = 100000\n",
    "steps = np.arange(nsteps)\n",
    "p = Poisson(L,rho, 'Jacobi')\n",
    "for i in steps : \n",
    "    p()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'y')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "# Define the axes\n",
    "x = np.arange(0, p.h*(p.L+2), p.h)\n",
    "y = np.arange(0, p.h*(p.L+2), p.h)\n",
    "# Get the grid\n",
    "X, Y = np.meshgrid(x, y)\n",
    "# Set Z to the poisson V[i][j]\n",
    "Z = np.array( p.V )\n",
    "\n",
    "fig = plt.figure(1)\n",
    "ax = fig.gca(projection='3d')\n",
    "sur = ax.plot_surface( X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\n",
    "                        linewidth=0, antialiased=False )\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'y')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "k = 0.008314463\n",
    "Z1 = np.zeros((N,N))\n",
    "Z1 = k*q/(np.sqrt((X-0.25)**2+(Y-0.5)**2))-k*q/(np.sqrt((X-0.75)**2+(Y-0.5)**2))\n",
    "fig1 = plt.figure(2)\n",
    "ax1 = fig1.gca(projection='3d')\n",
    "sur1 = ax1.plot_surface( X, Y, Z1, rstride=1, cstride=1, cmap=cm.coolwarm,\n",
    "                        linewidth=0, antialiased=False )\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convergence versus iteration\n",
    "\n",
    "Here we will compute the convergence (the difference between successive evaluations of the potential) as a function of the number of iterations. \n",
    "\n",
    "We see that Jacobi performs worst, G-S is second, and SOR is the best. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "methods = [\"Jacobi\", \"GaussSeidel\", \"SuccessiveOverRelaxation\"]\n",
    "solvers = []\n",
    "times = np.zeros( len(methods))\n",
    "for i,method in enumerate(methods) : \n",
    "    p = Poisson(L,rho, method)\n",
    "    err = []\n",
    "    t1 = time.perf_counter()    \n",
    "    for j in steps : \n",
    "        ierr = p()\n",
    "    t2 = time.perf_counter()\n",
    "    solvers.append(p)\n",
    "    times[i] = (t2-t1)\n",
    "    print(\"Method %40s processed %d steps in %6.5f  s\" % (method, len(steps), times[i]) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "fig = plt.figure(2)\n",
    "for i,method in enumerate(methods) :     \n",
    "    plt.plot(steps, solvers[i].errors, label=method )\n",
    "plt.title(\"Convergence of algorithms\")\n",
    "plt.xlabel(\"Iteration\")\n",
    "plt.ylabel(\"Error\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Performance in time\n",
    "\n",
    "We now investigate how quickly it takes each algorithm to reach a given precision (in this case, one part per million). Due to the vectorization of the Jacobi algorithm, it is able to acheive the target precision faster than both G-S and SOR, despite requiring more iterations. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "solvers = []\n",
    "acc = 1e-6\n",
    "times = np.zeros( len(methods))\n",
    "for i,method in enumerate(methods) : \n",
    "    p = Poisson(L,rho, method)\n",
    "    err = []\n",
    "    ierr = 9999.\n",
    "    t1 = time.perf_counter()\n",
    "    while ierr > acc :    \n",
    "        ierr = p()\n",
    "    t2 = time.perf_counter()\n",
    "    solvers.append(p)\n",
    "    times[i] = (t2-t1)\n",
    "    print(\"Accuracy %6.2e reached in %6.5f  s\" % (acc, times[i]) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Take-home message\n",
    "\n",
    "The message here is that there is now truly a trade-off between complex algorithms with deep loops, and simple algorithms that can be easily vectorized. Depending on the application, one or another approach may be favored. You should be aware of this fact as you go forward in your career path!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "***\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## FFT Solution\n",
    "\n",
    "\n",
    "Similarly to your courses, you can also numerically solve PDEs in the frequency domain instead of the time domain using Fourier analysis. In this case, we can also look at FFTs. For simplicity we will impose boundary conditions such that the limit of the potential tends to zero at infinite radius. \n",
    "\n",
    "Since the FFT is a linear operation, we can perform the FFT and inverse FFT separately for the rows and columns of the 2d distribution. The Fourier components are\n",
    "\n",
    "$$\n",
    "\\tilde{V}_{mn} = \\frac{h^2 \\tilde{\\rho}_{mn}}{4 - W^m - W^{-m} - W^n - W^{-n}}\n",
    "$$\n",
    "\n",
    "where $W = \\exp(2i\\pi/N)$ is a root of unity. \n",
    "\n",
    "In the end, it is often much faster to compute FFT-based solutions, especially for large values of $N$. In an apples-to-apples comparison, the fastest relaxation technique takes around 300 times longer for N=14 interior points (N=16 total points). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "L = 14\n",
    "N = L+2\n",
    "q = 10.0                # point charge\n",
    "h = 1/(L+1)\n",
    "rho = np.zeros( (N,N))\n",
    "rho[N // 2,N // 2] = q / h**2    # charge density\n",
    "\n",
    "p = Poisson(L,rho, method=\"FFT\")\n",
    "t1 = time.perf_counter()\n",
    "p()\n",
    "t2 = time.perf_counter()\n",
    "\n",
    "print(\"Solution computation took %6.5f s\"% (t2-t1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Define the axes\n",
    "x = np.arange(0, p.h*(p.L+2), p.h)\n",
    "y = np.arange(0, p.h*(p.L+2), p.h)\n",
    "# Get the grid\n",
    "X, Y = np.meshgrid(x, y)\n",
    "# Set Z to the poisson V[i][j]\n",
    "Z = np.array( p.V.real )\n",
    "\n",
    "fig = plt.figure(1)\n",
    "ax = fig.gca(projection='3d')\n",
    "sur = ax.plot_surface( X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm,\n",
    "                        linewidth=0, antialiased=False )\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"y\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
